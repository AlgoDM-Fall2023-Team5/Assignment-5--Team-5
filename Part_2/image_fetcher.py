import numpy as np
import pinecone
import boto3
from botocore.exceptions import NoCredentialsError
from PIL import Image
import shutil
import os

def search_and_display_images(image_vector):
  
  shutil.rmtree("images", ignore_errors=True)

  # Pinecone configuration
  pinecone_api_key = "7f78befa-055d-41ac-a90a-cff6a5282d66"
  index_name = "adm4"

  pinecone.init(api_key=pinecone_api_key, environment="gcp-starter")
  index = pinecone.Index(index_name)

  # S3 configuration
  # s3_bucket_name = "team5adm"
  # region_name = "us-east-2"
  # aws_access_key_id = "AKIAQ4WOK7VQVKP4WJVB"
  # aws_secret_access_key = "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"

  # s3 = boto3.client(service_name="s3", region_name=region_name,
  #                  aws_access_key_id=aws_access_key_id,
  #                  aws_secret_access_key=aws_secret_access_key)

  s3_bucket_name = "assignment4admt5"
  s3 = boto3.client(service_name = 's3',
                             region_name='us-east-2',
                             aws_access_key_id='AKIASGVOLPG2BPBLER6T',
                             aws_secret_access_key='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')

  # Search for closest images
  closest_image_ids = index.query(vector=image_vector, top_k=20, include_values=False)["matches"]
  closest_image_ids = [i["id"] for i in closest_image_ids]
  closest_image_ids = [i for i in closest_image_ids if "front" in i]
  # Download and display images 
  images_from_s3 = []
  os.makedirs("images", exist_ok=True)
  for image_id in closest_image_ids:
    try:
      s3.download_file(Bucket=s3_bucket_name,
                       Key=f"dataset/{image_id}",
                       Filename=f"images/{image_id}")
      images_from_s3.append(Image.open(f"images/{image_id}.jpg"))
    except NoCredentialsError:
      print("Error: AWS credentials not available.")
    except Exception as e:
      print(f"Error retrieving image {image_id}: {str(e)}")

  # Display the downloaded images
  for image in images_from_s3:
    image.show()

  return closest_image_ids, images_from_s3


if __name__ == "__main__":

  # Example usage
  image_vector = [0.141597793,0.435488284,-0.179969341,0.28055802,-0.271987945,0.354296237,-0.683740139,0.0939962566,0.2714535,0.0944087952,0.0457121022,0.505913556,1.11774707,-0.12856108,-0.141710848,0.242360875,1.19525337,0.297840178,0.0886425227,0.128844872,0.303407431,-0.366186082,0.434836924,-0.622450233,-0.0939333886,-0.0646743774,0.0619270578,0.0820194557,0.470697463,-0.173753,0.170396596,0.253018498,-0.0963675901,-0.225706697,0.0788872615,-0.160268545,0.283471525,0.395178497,0.0432605334,1.80320024,-0.405298829,0.301143944,0.0436425693,0.187616199,-0.275107026,-1.3940891,-0.205432683,0.0286315866,0.367333233,-0.247582614,0.585758567,-0.311959237,0.149424672,0.210373536,-0.451376915,-0.13975291,0.10881912,0.185468584,0.027739834,0.412492692,0.50916034,0.25498572,0.438260913,0.0884065926,0.0863482803,-0.150627702,-0.0181710701,-0.772798538,-0.227120057,-0.056769751,0.11001502,0.454856664,-0.380609512,0.0833867788,0.0671403557,0.256391793,-0.122187547,0.27098152,0.091372557,0.106628403,-0.598175466,-0.412009329,-0.449311912,0.239333525,-0.145588562,0.103699744,0.921731353,-0.191715464,-0.0657387823,0.160987437,0.133367568,-0.248329833,-5.73407316,0.154625192,0.395481944,0.437114388,-0.145719901,0.282191455,-0.577236235,0.848094642,0.169986486,-0.361341059,-0.0463499464,-0.285555422,-0.121705,0.123504482,1.12583,-0.108179882,-0.2603468,0.179764658,-0.00425865874,0.353803217,-0.108325399,0.130194336,0.229155898,0.0736466423,-0.0743955,0.0695456341,0.248887166,-0.0118705621,-0.0923524126,-0.389438748,-0.223275498,-0.0936491042,-0.0391046777,0.126294807,-0.118417978,0.389436036,-0.263797462,0.151378781,-0.00897487812,0.185485944,-0.104827337,0.753373682,0.245004267,0.0728338361,-0.110220537,0.335661232,0.166478366,0.0314776972,-0.246523649,-0.1469405,-0.207420021,0.0200784281,-0.242721796,0.363516748,-0.0873592794,-0.175510794,-0.440704,-0.141744286,0.398879945,-0.504027605,1.20144069,-0.334383607,0.190557435,0.354709893,0.485982597,0.555068612,0.499339879,-0.241648808,-0.599668,-0.159232289,-0.0497144461,-0.114105918,0.205929831,0.0854667649,-0.421934128,0.114760354,0.125910163,0.557082,0.141241908,0.316971689,0.264787465,0.0644472465,0.0259994157,-0.491515756,1.35731113,-0.154716641,0.64119792,-0.276609212,0.102562368,0.198304534,0.713711798,-0.0144975837,0.0551990829,0.115435332,0.124759324,-0.390932232,0.0589834936,0.273668677,0.410461932,0.0744234845,0.0800522268,0.0226613972,0.933126807,-0.245474383,0.00237488747,-0.243526116,0.757261336,0.143498108,-0.0592217073,-0.139510959,-0.0450537354,-0.193549931,0.103453018,-0.120917313,-0.453263432,0.0851958767,0.327874362,0.543110609,0.82665658,0.880773664,-0.00456623733,0.10045816,-0.416230559,0.192287266,-0.375495732,0.325905055,0.804749727,-0.207705885,-0.0474037156,-0.385920554,-0.117452875,0.31284225,-0.21460782,0.409357041,0.276857674,-0.240853757,0.448455155,0.310895383,0.165596142,-0.0606609248,-0.164241,0.249267742,-0.229274273,-0.847133577,0.136736795,0.139481232,-0.511632621,0.0573595911,0.0549764223,0.104302809,-0.193141803,-0.593295,0.402311474,-0.16655238,-0.294949621,0.621265173,-0.136144802,0.23694773,0.207800522,-0.498685,-0.179732591,-0.0603593253,0.499530554,0.270868868,-0.245873243,-0.094909057,0.0930995867,-0.424410194,0.188301861,-0.425726652,-0.296348304,-1.19715846,-0.0715160444,-0.314990699,-0.207128376,-0.281777322,0.317829072,0.439616621,0.289615035,0.544082344,-0.0110663678,-0.323421806,-0.159123927,0.176371366,0.17875959,0.361224264,-0.389608651,-0.185542941,0.103017986,-0.160822943,-0.511692286,-0.02821251,-0.0182058457,0.0938372761,1.03189266,-0.424313039,-0.0523279049,0.306745708,-0.106658727,-0.166816637,0.00493811071,0.0180898458,-0.0195157714,-0.307319701,-0.52666986,-0.265242279,0.356755078,0.39362,-0.556123078,-0.438839674,0.288541794,-0.16999431,0.0222278312,0.635785937,0.606048763,0.439441741,-0.682514906,-0.0366149396,-0.433363706,0.303807169,0.75073278,0.847485721,0.0668854564,0.0108424416,0.581237614,-0.194417417,-0.0781031,-0.102256753,-0.0697650835,1.57286274,-0.0137749845,-0.0885476544,0.0984116197,-0.239118576,0.0113672214,-0.508431613,-0.0897299871,-0.165503606,0.27140224,0.174397454,0.168660313,-0.468294948,0.149045333,-0.0602872297,0.11666549,-0.284240127,0.313700885,0.175962046,-0.0666303635,-0.236452222,-0.235860705,0.3567653,-0.102801956,0.0846493244,0.311472148,-0.101425797,0.167887017,0.282995403,0.625840247,0.239546403,0.36273554,-0.458241224,0.161476225,-0.221882105,-0.782567441,0.533037186,-0.250607967,0.144027442,1.02696621,-0.538632274,0.251505733,0.298763573,-0.511134267,0.0240278263,-0.201750815,-0.670291,-0.1036359,0.450693369,0.290989369,-0.0894615948,-0.172078073,0.126407191,-0.151581392,-0.5887869,1.14784741,0.277147293,0.343061745,0.56647253,-0.128160238,-0.144874975,0.00787452236,-0.350883722,-0.0157380141,0.317860752,0.715557754,-0.286677837,-0.117250428,0.67237711,-0.943869829,0.508319139,0.434082896,0.241905302,-0.3252756,0.0501108691,0.281620502,-0.322404206,0.608154,-0.305801153,0.204315141,0.0698044598,0.784122586,-0.0141542852,0.10007485,0.127970561,-0.295091718,0.130367413,0.259604514,0.0889874101,0.227902755,-0.178036526,-0.0953002423,0.386253834,-0.160598934,0.386501402,0.324000627,0.390644044,-0.394159734,-0.569106579,0.602172732,0.390269578,0.157667607,0.471198678,0.181570575,0.416689664,0.0689215288,-0.120519921,-1.69434369,-0.0812792853,0.253517,-0.163755611,1.48590934,-0.128994063,0.381884485,0.0169595014,0.121733047,-0.0731271952,0.389789313,-0.0177601967,-0.199836656,0.638219953,0.0435408875,0.0210630819,0.248580709,-0.249421179,0.56155324,-0.118596971,-0.5449875,0.166611984,0.214483351,0.421891391,0.382242203,-0.22814329,-0.250393957,0.306775779,-0.257996649,0.305812895,0.465113789,0.345151454,0.279971,-0.0649824142,-0.102315336,0.0955118611,-0.524755955,0.198675528,-0.0790915638,0.131584674,0.276813149,0.270806879,0.0388073772,-0.123874158,0.272975653,-0.284739077,0.165680498,0.405700773,-0.0998152494,-0.168720886,0.342035979,0.279347956,-0.00978288613,-0.11880213,0.00624398049,-0.262296766,-0.116364986,0.222727507,-0.156240165,0.614091337,-0.541085184,-0.38180238,0.394885659,-0.097859934,0.0894037709,0.209611923,-0.0623497516,-0.0258671679,0.350410968,0.165022954,0.0895087,0.203475267,0.11140988,0.0243694149,0.0427213535,-0.0801043957,0.210545838,-0.343221515,-0.140271679,0.0880471468,0.147683412,0.310178816,-0.178109288,0.34487763]  # Replace with actual image vector
  closest_image_ids, images_from_s3 = search_and_display_images(image_vector)

  print(f"Closest image IDs: {closest_image_ids}")
